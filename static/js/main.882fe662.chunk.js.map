{"version":3,"sources":["frontEnd/header/Header.js","frontEnd/home/Home.js","frontEnd/NotFound.js","frontEnd/projects/Projects.js","frontEnd/contact/Contact.js","frontEnd/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","react_router_dom","to","Home","Header_Header","NotFound","App","react_router","exact","path","component","Projects","Contact","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_frontEnd_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uXAMe,SAASA,EAAOC,GAC3B,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,IAAKF,UAAU,qBAAzB,QACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,YAAaF,UAAU,qBAAjC,YACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,WAAYF,UAAU,qBAAhC,aCTD,SAASG,EAAKP,GACzB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,qCCVT,SAASM,IACpB,OACIR,EAAAC,EAAAC,cAAA,mECAO,SAASI,EAAKP,GACzB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,wCCNL,SAASI,EAAKP,GACzB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,qCCeLO,mLAfX,OACIT,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjCN,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWL,IAC1CR,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWC,IACzCd,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWE,cATtCC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.882fe662.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom'\n\n\n\nexport default function Header(props) {\n    return(\n        <header className='Header'>\n            <h1>Lucia's portfolio</h1>\n            <div className='Header-links'>\n                <Link to={'/'} className='Header-links-item' >Home</Link>\n                <Link to={'/projects'} className='Header-links-item'>Projects</Link>\n                <Link to={'/contact'} className='Header-links-item'>Contact</Link>\n            </div>\n        </header>\n    );\n}","import React from 'react';\nimport './Home.css';\nimport Header from '../header/Header.js'\n\nexport default function Home(props) {\n    return(\n        <div>\n            <Header/>\n            <body className='Home'>\n                <div className='Home-container'>\n                    <h1>\n                        <p>Hello world!! My name is Lucia!</p>\n                        <p>This is my Home Page</p>\n                    </h1>\n                </div>\n            </body>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function NotFound() {\n    return(\n        <h1>Ooops, it looks like this page doesn't exist :(</h1>\n    );\n}","import React from 'react';\nimport './Projects.css';\nimport Header from '../header/Header.js';\n\nexport default function Home(props) {\n    return(\n        <div>\n            <Header/>\n            <body className='Projects'>\n                <div className='Projects-container'>\n                    <h1>\n                        My projects page!\n                    </h1>\n                </div>\n            </body>\n        </div>\n    )\n}","import React from 'react';\nimport './Contact.css';\nimport Header from '../header/Header.js';\n\nexport default function Home(props) {\n    return(\n        <div>\n            <Header/>\n            <body className='Contact'>\n                <div className='Contact-container'>\n                    <h1>\n                        My contact page!\n                    </h1>\n                </div>\n            </body>\n        </div>\n    )\n}","import React, {Component} from 'react';\nimport  {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport Home from './home/Home.js';\nimport NotFound from './NotFound';\nimport Projects from './projects/Projects.js';\nimport Contact from './contact/Contact.js';\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n          <div className='App'>\n            <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/not-found' component={NotFound}/>\n                <Route exact path='/projects' component={Projects}/>\n                <Route exact path='/contact' component={Contact}/>\n              </Switch>\n          </div>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './frontEnd/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}